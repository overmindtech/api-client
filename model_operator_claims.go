/*
NATS Token Exchange

Exchanges OAuth tokens for NATS tokens

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// OperatorClaims OperatorClaims define the data for an operator JWT
type OperatorClaims struct {
	Aud *string `json:"aud,omitempty"`
	Exp *int64 `json:"exp,omitempty"`
	Iat *int64 `json:"iat,omitempty"`
	Iss *string `json:"iss,omitempty"`
	Jti *string `json:"jti,omitempty"`
	Name *string `json:"name,omitempty"`
	Nbf *int64 `json:"nbf,omitempty"`
	Sub *string `json:"sub,omitempty"`
	Nats *Operator `json:"nats,omitempty"`
}

// NewOperatorClaims instantiates a new OperatorClaims object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOperatorClaims() *OperatorClaims {
	this := OperatorClaims{}
	return &this
}

// NewOperatorClaimsWithDefaults instantiates a new OperatorClaims object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOperatorClaimsWithDefaults() *OperatorClaims {
	this := OperatorClaims{}
	return &this
}

// GetAud returns the Aud field value if set, zero value otherwise.
func (o *OperatorClaims) GetAud() string {
	if o == nil || o.Aud == nil {
		var ret string
		return ret
	}
	return *o.Aud
}

// GetAudOk returns a tuple with the Aud field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatorClaims) GetAudOk() (*string, bool) {
	if o == nil || o.Aud == nil {
		return nil, false
	}
	return o.Aud, true
}

// HasAud returns a boolean if a field has been set.
func (o *OperatorClaims) HasAud() bool {
	if o != nil && o.Aud != nil {
		return true
	}

	return false
}

// SetAud gets a reference to the given string and assigns it to the Aud field.
func (o *OperatorClaims) SetAud(v string) {
	o.Aud = &v
}

// GetExp returns the Exp field value if set, zero value otherwise.
func (o *OperatorClaims) GetExp() int64 {
	if o == nil || o.Exp == nil {
		var ret int64
		return ret
	}
	return *o.Exp
}

// GetExpOk returns a tuple with the Exp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatorClaims) GetExpOk() (*int64, bool) {
	if o == nil || o.Exp == nil {
		return nil, false
	}
	return o.Exp, true
}

// HasExp returns a boolean if a field has been set.
func (o *OperatorClaims) HasExp() bool {
	if o != nil && o.Exp != nil {
		return true
	}

	return false
}

// SetExp gets a reference to the given int64 and assigns it to the Exp field.
func (o *OperatorClaims) SetExp(v int64) {
	o.Exp = &v
}

// GetIat returns the Iat field value if set, zero value otherwise.
func (o *OperatorClaims) GetIat() int64 {
	if o == nil || o.Iat == nil {
		var ret int64
		return ret
	}
	return *o.Iat
}

// GetIatOk returns a tuple with the Iat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatorClaims) GetIatOk() (*int64, bool) {
	if o == nil || o.Iat == nil {
		return nil, false
	}
	return o.Iat, true
}

// HasIat returns a boolean if a field has been set.
func (o *OperatorClaims) HasIat() bool {
	if o != nil && o.Iat != nil {
		return true
	}

	return false
}

// SetIat gets a reference to the given int64 and assigns it to the Iat field.
func (o *OperatorClaims) SetIat(v int64) {
	o.Iat = &v
}

// GetIss returns the Iss field value if set, zero value otherwise.
func (o *OperatorClaims) GetIss() string {
	if o == nil || o.Iss == nil {
		var ret string
		return ret
	}
	return *o.Iss
}

// GetIssOk returns a tuple with the Iss field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatorClaims) GetIssOk() (*string, bool) {
	if o == nil || o.Iss == nil {
		return nil, false
	}
	return o.Iss, true
}

// HasIss returns a boolean if a field has been set.
func (o *OperatorClaims) HasIss() bool {
	if o != nil && o.Iss != nil {
		return true
	}

	return false
}

// SetIss gets a reference to the given string and assigns it to the Iss field.
func (o *OperatorClaims) SetIss(v string) {
	o.Iss = &v
}

// GetJti returns the Jti field value if set, zero value otherwise.
func (o *OperatorClaims) GetJti() string {
	if o == nil || o.Jti == nil {
		var ret string
		return ret
	}
	return *o.Jti
}

// GetJtiOk returns a tuple with the Jti field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatorClaims) GetJtiOk() (*string, bool) {
	if o == nil || o.Jti == nil {
		return nil, false
	}
	return o.Jti, true
}

// HasJti returns a boolean if a field has been set.
func (o *OperatorClaims) HasJti() bool {
	if o != nil && o.Jti != nil {
		return true
	}

	return false
}

// SetJti gets a reference to the given string and assigns it to the Jti field.
func (o *OperatorClaims) SetJti(v string) {
	o.Jti = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OperatorClaims) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatorClaims) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OperatorClaims) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OperatorClaims) SetName(v string) {
	o.Name = &v
}

// GetNbf returns the Nbf field value if set, zero value otherwise.
func (o *OperatorClaims) GetNbf() int64 {
	if o == nil || o.Nbf == nil {
		var ret int64
		return ret
	}
	return *o.Nbf
}

// GetNbfOk returns a tuple with the Nbf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatorClaims) GetNbfOk() (*int64, bool) {
	if o == nil || o.Nbf == nil {
		return nil, false
	}
	return o.Nbf, true
}

// HasNbf returns a boolean if a field has been set.
func (o *OperatorClaims) HasNbf() bool {
	if o != nil && o.Nbf != nil {
		return true
	}

	return false
}

// SetNbf gets a reference to the given int64 and assigns it to the Nbf field.
func (o *OperatorClaims) SetNbf(v int64) {
	o.Nbf = &v
}

// GetSub returns the Sub field value if set, zero value otherwise.
func (o *OperatorClaims) GetSub() string {
	if o == nil || o.Sub == nil {
		var ret string
		return ret
	}
	return *o.Sub
}

// GetSubOk returns a tuple with the Sub field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatorClaims) GetSubOk() (*string, bool) {
	if o == nil || o.Sub == nil {
		return nil, false
	}
	return o.Sub, true
}

// HasSub returns a boolean if a field has been set.
func (o *OperatorClaims) HasSub() bool {
	if o != nil && o.Sub != nil {
		return true
	}

	return false
}

// SetSub gets a reference to the given string and assigns it to the Sub field.
func (o *OperatorClaims) SetSub(v string) {
	o.Sub = &v
}

// GetNats returns the Nats field value if set, zero value otherwise.
func (o *OperatorClaims) GetNats() Operator {
	if o == nil || o.Nats == nil {
		var ret Operator
		return ret
	}
	return *o.Nats
}

// GetNatsOk returns a tuple with the Nats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatorClaims) GetNatsOk() (*Operator, bool) {
	if o == nil || o.Nats == nil {
		return nil, false
	}
	return o.Nats, true
}

// HasNats returns a boolean if a field has been set.
func (o *OperatorClaims) HasNats() bool {
	if o != nil && o.Nats != nil {
		return true
	}

	return false
}

// SetNats gets a reference to the given Operator and assigns it to the Nats field.
func (o *OperatorClaims) SetNats(v Operator) {
	o.Nats = &v
}

func (o OperatorClaims) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Aud != nil {
		toSerialize["aud"] = o.Aud
	}
	if o.Exp != nil {
		toSerialize["exp"] = o.Exp
	}
	if o.Iat != nil {
		toSerialize["iat"] = o.Iat
	}
	if o.Iss != nil {
		toSerialize["iss"] = o.Iss
	}
	if o.Jti != nil {
		toSerialize["jti"] = o.Jti
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Nbf != nil {
		toSerialize["nbf"] = o.Nbf
	}
	if o.Sub != nil {
		toSerialize["sub"] = o.Sub
	}
	if o.Nats != nil {
		toSerialize["nats"] = o.Nats
	}
	return json.Marshal(toSerialize)
}

type NullableOperatorClaims struct {
	value *OperatorClaims
	isSet bool
}

func (v NullableOperatorClaims) Get() *OperatorClaims {
	return v.value
}

func (v *NullableOperatorClaims) Set(val *OperatorClaims) {
	v.value = val
	v.isSet = true
}

func (v NullableOperatorClaims) IsSet() bool {
	return v.isSet
}

func (v *NullableOperatorClaims) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperatorClaims(val *OperatorClaims) *NullableOperatorClaims {
	return &NullableOperatorClaims{value: val, isSet: true}
}

func (v NullableOperatorClaims) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperatorClaims) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


