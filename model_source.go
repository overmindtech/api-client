/*
Overmind API

API for managing your Overmind account

API version: 0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overmind

import (
	"encoding/json"
)

// checks if the Source type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Source{}

// Source A source that is capable of discovering items
type Source struct {
	// The descriptive name of the source
	DescriptiveName *string `json:"descriptive_name,omitempty"`
	// Unique ID of the source
	SourceId *string `json:"source_id,omitempty"`
	// The name of the nats JWT that has been generated for this source
	TokenName *string `json:"token_name,omitempty"`
	// When the NATS JWT expires (unix time)
	TokenExpiry *float32 `json:"token_expiry,omitempty"`
	// The public NKey associated with the NATS JWT
	PublicNkey *string `json:"public_nkey,omitempty"`
	// What source to configure. Currently either \"stdlib\" or \"aws\"
	Type *string `json:"type,omitempty"`
	// Config for this source. See the source documentation for what source-specific config is available/required
	Config *map[string]string `json:"config,omitempty"`
}

// NewSource instantiates a new Source object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSource() *Source {
	this := Source{}
	return &this
}

// NewSourceWithDefaults instantiates a new Source object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceWithDefaults() *Source {
	this := Source{}
	return &this
}

// GetDescriptiveName returns the DescriptiveName field value if set, zero value otherwise.
func (o *Source) GetDescriptiveName() string {
	if o == nil || isNil(o.DescriptiveName) {
		var ret string
		return ret
	}
	return *o.DescriptiveName
}

// GetDescriptiveNameOk returns a tuple with the DescriptiveName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Source) GetDescriptiveNameOk() (*string, bool) {
	if o == nil || isNil(o.DescriptiveName) {
		return nil, false
	}
	return o.DescriptiveName, true
}

// HasDescriptiveName returns a boolean if a field has been set.
func (o *Source) HasDescriptiveName() bool {
	if o != nil && !isNil(o.DescriptiveName) {
		return true
	}

	return false
}

// SetDescriptiveName gets a reference to the given string and assigns it to the DescriptiveName field.
func (o *Source) SetDescriptiveName(v string) {
	o.DescriptiveName = &v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *Source) GetSourceId() string {
	if o == nil || isNil(o.SourceId) {
		var ret string
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Source) GetSourceIdOk() (*string, bool) {
	if o == nil || isNil(o.SourceId) {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *Source) HasSourceId() bool {
	if o != nil && !isNil(o.SourceId) {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given string and assigns it to the SourceId field.
func (o *Source) SetSourceId(v string) {
	o.SourceId = &v
}

// GetTokenName returns the TokenName field value if set, zero value otherwise.
func (o *Source) GetTokenName() string {
	if o == nil || isNil(o.TokenName) {
		var ret string
		return ret
	}
	return *o.TokenName
}

// GetTokenNameOk returns a tuple with the TokenName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Source) GetTokenNameOk() (*string, bool) {
	if o == nil || isNil(o.TokenName) {
		return nil, false
	}
	return o.TokenName, true
}

// HasTokenName returns a boolean if a field has been set.
func (o *Source) HasTokenName() bool {
	if o != nil && !isNil(o.TokenName) {
		return true
	}

	return false
}

// SetTokenName gets a reference to the given string and assigns it to the TokenName field.
func (o *Source) SetTokenName(v string) {
	o.TokenName = &v
}

// GetTokenExpiry returns the TokenExpiry field value if set, zero value otherwise.
func (o *Source) GetTokenExpiry() float32 {
	if o == nil || isNil(o.TokenExpiry) {
		var ret float32
		return ret
	}
	return *o.TokenExpiry
}

// GetTokenExpiryOk returns a tuple with the TokenExpiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Source) GetTokenExpiryOk() (*float32, bool) {
	if o == nil || isNil(o.TokenExpiry) {
		return nil, false
	}
	return o.TokenExpiry, true
}

// HasTokenExpiry returns a boolean if a field has been set.
func (o *Source) HasTokenExpiry() bool {
	if o != nil && !isNil(o.TokenExpiry) {
		return true
	}

	return false
}

// SetTokenExpiry gets a reference to the given float32 and assigns it to the TokenExpiry field.
func (o *Source) SetTokenExpiry(v float32) {
	o.TokenExpiry = &v
}

// GetPublicNkey returns the PublicNkey field value if set, zero value otherwise.
func (o *Source) GetPublicNkey() string {
	if o == nil || isNil(o.PublicNkey) {
		var ret string
		return ret
	}
	return *o.PublicNkey
}

// GetPublicNkeyOk returns a tuple with the PublicNkey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Source) GetPublicNkeyOk() (*string, bool) {
	if o == nil || isNil(o.PublicNkey) {
		return nil, false
	}
	return o.PublicNkey, true
}

// HasPublicNkey returns a boolean if a field has been set.
func (o *Source) HasPublicNkey() bool {
	if o != nil && !isNil(o.PublicNkey) {
		return true
	}

	return false
}

// SetPublicNkey gets a reference to the given string and assigns it to the PublicNkey field.
func (o *Source) SetPublicNkey(v string) {
	o.PublicNkey = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Source) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Source) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Source) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Source) SetType(v string) {
	o.Type = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *Source) GetConfig() map[string]string {
	if o == nil || isNil(o.Config) {
		var ret map[string]string
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Source) GetConfigOk() (*map[string]string, bool) {
	if o == nil || isNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *Source) HasConfig() bool {
	if o != nil && !isNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]string and assigns it to the Config field.
func (o *Source) SetConfig(v map[string]string) {
	o.Config = &v
}

func (o Source) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Source) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.DescriptiveName) {
		toSerialize["descriptive_name"] = o.DescriptiveName
	}
	if !isNil(o.SourceId) {
		toSerialize["source_id"] = o.SourceId
	}
	if !isNil(o.TokenName) {
		toSerialize["token_name"] = o.TokenName
	}
	if !isNil(o.TokenExpiry) {
		toSerialize["token_expiry"] = o.TokenExpiry
	}
	if !isNil(o.PublicNkey) {
		toSerialize["public_nkey"] = o.PublicNkey
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	return toSerialize, nil
}

type NullableSource struct {
	value *Source
	isSet bool
}

func (v NullableSource) Get() *Source {
	return v.value
}

func (v *NullableSource) Set(val *Source) {
	v.value = val
	v.isSet = true
}

func (v NullableSource) IsSet() bool {
	return v.isSet
}

func (v *NullableSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSource(val *Source) *NullableSource {
	return &NullableSource{value: val, isSet: true}
}

func (v NullableSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


