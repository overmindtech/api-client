/*
Overmind API

API for managing your Overmind account

API version: 0.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package overmind

import (
	"encoding/json"
)

// checks if the Source type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Source{}

// Source A source that is capable of discovering items
type Source struct {
	// The descriptive name of the source
	DescriptiveName string `json:"descriptive_name"`
	// Unique ID of the source
	SourceId string `json:"source_id"`
	// The name of the nats JWT that has been generated for this source
	TokenName string `json:"token_name"`
	// When the NATS JWT expires (unix time)
	TokenExpiry float32 `json:"token_expiry"`
	// The public NKey associated with the NATS JWT
	PublicNkey string `json:"public_nkey"`
	// What source to configure. Currently either \"stdlib\" or \"aws\"
	Type string `json:"type"`
	// Config for this source. See the source documentation for what source-specific config is available/required. This will be supplied directly to viper via a config file at `/etc/srcman/config/source.yaml`
	Config map[string]interface{} `json:"config,omitempty"`
	// Additional config options that should be passed to the source. The keys of this object should be file names, and the values should be their content. These files will be made available to the source at runtime. Check the source's documentation for what to configure here if required
	AdditionalConfig *map[string]string `json:"additional_config,omitempty"`
	// Status of the source
	Status *string `json:"status,omitempty"`
	// The error message if the source is unhealthy
	Error *string `json:"error,omitempty"`
}

// NewSource instantiates a new Source object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSource(descriptiveName string, sourceId string, tokenName string, tokenExpiry float32, publicNkey string, type_ string) *Source {
	this := Source{}
	this.DescriptiveName = descriptiveName
	this.SourceId = sourceId
	this.TokenName = tokenName
	this.TokenExpiry = tokenExpiry
	this.PublicNkey = publicNkey
	this.Type = type_
	return &this
}

// NewSourceWithDefaults instantiates a new Source object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceWithDefaults() *Source {
	this := Source{}
	return &this
}

// GetDescriptiveName returns the DescriptiveName field value
func (o *Source) GetDescriptiveName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DescriptiveName
}

// GetDescriptiveNameOk returns a tuple with the DescriptiveName field value
// and a boolean to check if the value has been set.
func (o *Source) GetDescriptiveNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DescriptiveName, true
}

// SetDescriptiveName sets field value
func (o *Source) SetDescriptiveName(v string) {
	o.DescriptiveName = v
}

// GetSourceId returns the SourceId field value
func (o *Source) GetSourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value
// and a boolean to check if the value has been set.
func (o *Source) GetSourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceId, true
}

// SetSourceId sets field value
func (o *Source) SetSourceId(v string) {
	o.SourceId = v
}

// GetTokenName returns the TokenName field value
func (o *Source) GetTokenName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenName
}

// GetTokenNameOk returns a tuple with the TokenName field value
// and a boolean to check if the value has been set.
func (o *Source) GetTokenNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenName, true
}

// SetTokenName sets field value
func (o *Source) SetTokenName(v string) {
	o.TokenName = v
}

// GetTokenExpiry returns the TokenExpiry field value
func (o *Source) GetTokenExpiry() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TokenExpiry
}

// GetTokenExpiryOk returns a tuple with the TokenExpiry field value
// and a boolean to check if the value has been set.
func (o *Source) GetTokenExpiryOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenExpiry, true
}

// SetTokenExpiry sets field value
func (o *Source) SetTokenExpiry(v float32) {
	o.TokenExpiry = v
}

// GetPublicNkey returns the PublicNkey field value
func (o *Source) GetPublicNkey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicNkey
}

// GetPublicNkeyOk returns a tuple with the PublicNkey field value
// and a boolean to check if the value has been set.
func (o *Source) GetPublicNkeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicNkey, true
}

// SetPublicNkey sets field value
func (o *Source) SetPublicNkey(v string) {
	o.PublicNkey = v
}

// GetType returns the Type field value
func (o *Source) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Source) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Source) SetType(v string) {
	o.Type = v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *Source) GetConfig() map[string]interface{} {
	if o == nil || IsNil(o.Config) {
		var ret map[string]interface{}
		return ret
	}
	return o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Source) GetConfigOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Config) {
		return map[string]interface{}{}, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *Source) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]interface{} and assigns it to the Config field.
func (o *Source) SetConfig(v map[string]interface{}) {
	o.Config = v
}

// GetAdditionalConfig returns the AdditionalConfig field value if set, zero value otherwise.
func (o *Source) GetAdditionalConfig() map[string]string {
	if o == nil || IsNil(o.AdditionalConfig) {
		var ret map[string]string
		return ret
	}
	return *o.AdditionalConfig
}

// GetAdditionalConfigOk returns a tuple with the AdditionalConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Source) GetAdditionalConfigOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.AdditionalConfig) {
		return nil, false
	}
	return o.AdditionalConfig, true
}

// HasAdditionalConfig returns a boolean if a field has been set.
func (o *Source) HasAdditionalConfig() bool {
	if o != nil && !IsNil(o.AdditionalConfig) {
		return true
	}

	return false
}

// SetAdditionalConfig gets a reference to the given map[string]string and assigns it to the AdditionalConfig field.
func (o *Source) SetAdditionalConfig(v map[string]string) {
	o.AdditionalConfig = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Source) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Source) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Source) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Source) SetStatus(v string) {
	o.Status = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *Source) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Source) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *Source) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *Source) SetError(v string) {
	o.Error = &v
}

func (o Source) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Source) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["descriptive_name"] = o.DescriptiveName
	toSerialize["source_id"] = o.SourceId
	toSerialize["token_name"] = o.TokenName
	toSerialize["token_expiry"] = o.TokenExpiry
	toSerialize["public_nkey"] = o.PublicNkey
	toSerialize["type"] = o.Type
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.AdditionalConfig) {
		toSerialize["additional_config"] = o.AdditionalConfig
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

type NullableSource struct {
	value *Source
	isSet bool
}

func (v NullableSource) Get() *Source {
	return v.value
}

func (v *NullableSource) Set(val *Source) {
	v.value = val
	v.isSet = true
}

func (v NullableSource) IsSet() bool {
	return v.isSet
}

func (v *NullableSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSource(val *Source) *NullableSource {
	return &NullableSource{value: val, isSet: true}
}

func (v NullableSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


