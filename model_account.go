/*
NATS Token Exchange

Exchanges OAuth tokens for NATS tokens

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tokenx

import (
	"encoding/json"
)

// Account Account holds account specific claims data
type Account struct {
	DefaultPermissions *Permissions `json:"default_permissions,omitempty"`
	Description *string `json:"description,omitempty"`
	// Exports is a slice of exports
	Exports []Export `json:"exports,omitempty"`
	// Imports is a list of import structs
	Imports []Import `json:"imports,omitempty"`
	InfoUrl *string `json:"info_url,omitempty"`
	Limits *OperatorLimits `json:"limits,omitempty"`
	Mappings *map[string][]WeightedMapping `json:"mappings,omitempty"`
	// RevocationList is used to store a mapping of public keys to unix timestamps
	Revocations *map[string]int64 `json:"revocations,omitempty"`
	// StringList is a wrapper for an array of strings
	SigningKeys []string `json:"signing_keys,omitempty"`
	// TagList is a unique array of lower case strings All tag list methods lower case the strings in the arguments
	Tags []string `json:"tags,omitempty"`
	// ClaimType is used to indicate the type of JWT being stored in a Claim
	Type *string `json:"type,omitempty"`
	Version *int64 `json:"version,omitempty"`
}

// NewAccount instantiates a new Account object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccount() *Account {
	this := Account{}
	return &this
}

// NewAccountWithDefaults instantiates a new Account object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountWithDefaults() *Account {
	this := Account{}
	return &this
}

// GetDefaultPermissions returns the DefaultPermissions field value if set, zero value otherwise.
func (o *Account) GetDefaultPermissions() Permissions {
	if o == nil || o.DefaultPermissions == nil {
		var ret Permissions
		return ret
	}
	return *o.DefaultPermissions
}

// GetDefaultPermissionsOk returns a tuple with the DefaultPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetDefaultPermissionsOk() (*Permissions, bool) {
	if o == nil || o.DefaultPermissions == nil {
		return nil, false
	}
	return o.DefaultPermissions, true
}

// HasDefaultPermissions returns a boolean if a field has been set.
func (o *Account) HasDefaultPermissions() bool {
	if o != nil && o.DefaultPermissions != nil {
		return true
	}

	return false
}

// SetDefaultPermissions gets a reference to the given Permissions and assigns it to the DefaultPermissions field.
func (o *Account) SetDefaultPermissions(v Permissions) {
	o.DefaultPermissions = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Account) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Account) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Account) SetDescription(v string) {
	o.Description = &v
}

// GetExports returns the Exports field value if set, zero value otherwise.
func (o *Account) GetExports() []Export {
	if o == nil || o.Exports == nil {
		var ret []Export
		return ret
	}
	return o.Exports
}

// GetExportsOk returns a tuple with the Exports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetExportsOk() ([]Export, bool) {
	if o == nil || o.Exports == nil {
		return nil, false
	}
	return o.Exports, true
}

// HasExports returns a boolean if a field has been set.
func (o *Account) HasExports() bool {
	if o != nil && o.Exports != nil {
		return true
	}

	return false
}

// SetExports gets a reference to the given []Export and assigns it to the Exports field.
func (o *Account) SetExports(v []Export) {
	o.Exports = v
}

// GetImports returns the Imports field value if set, zero value otherwise.
func (o *Account) GetImports() []Import {
	if o == nil || o.Imports == nil {
		var ret []Import
		return ret
	}
	return o.Imports
}

// GetImportsOk returns a tuple with the Imports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetImportsOk() ([]Import, bool) {
	if o == nil || o.Imports == nil {
		return nil, false
	}
	return o.Imports, true
}

// HasImports returns a boolean if a field has been set.
func (o *Account) HasImports() bool {
	if o != nil && o.Imports != nil {
		return true
	}

	return false
}

// SetImports gets a reference to the given []Import and assigns it to the Imports field.
func (o *Account) SetImports(v []Import) {
	o.Imports = v
}

// GetInfoUrl returns the InfoUrl field value if set, zero value otherwise.
func (o *Account) GetInfoUrl() string {
	if o == nil || o.InfoUrl == nil {
		var ret string
		return ret
	}
	return *o.InfoUrl
}

// GetInfoUrlOk returns a tuple with the InfoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetInfoUrlOk() (*string, bool) {
	if o == nil || o.InfoUrl == nil {
		return nil, false
	}
	return o.InfoUrl, true
}

// HasInfoUrl returns a boolean if a field has been set.
func (o *Account) HasInfoUrl() bool {
	if o != nil && o.InfoUrl != nil {
		return true
	}

	return false
}

// SetInfoUrl gets a reference to the given string and assigns it to the InfoUrl field.
func (o *Account) SetInfoUrl(v string) {
	o.InfoUrl = &v
}

// GetLimits returns the Limits field value if set, zero value otherwise.
func (o *Account) GetLimits() OperatorLimits {
	if o == nil || o.Limits == nil {
		var ret OperatorLimits
		return ret
	}
	return *o.Limits
}

// GetLimitsOk returns a tuple with the Limits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetLimitsOk() (*OperatorLimits, bool) {
	if o == nil || o.Limits == nil {
		return nil, false
	}
	return o.Limits, true
}

// HasLimits returns a boolean if a field has been set.
func (o *Account) HasLimits() bool {
	if o != nil && o.Limits != nil {
		return true
	}

	return false
}

// SetLimits gets a reference to the given OperatorLimits and assigns it to the Limits field.
func (o *Account) SetLimits(v OperatorLimits) {
	o.Limits = &v
}

// GetMappings returns the Mappings field value if set, zero value otherwise.
func (o *Account) GetMappings() map[string][]WeightedMapping {
	if o == nil || o.Mappings == nil {
		var ret map[string][]WeightedMapping
		return ret
	}
	return *o.Mappings
}

// GetMappingsOk returns a tuple with the Mappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetMappingsOk() (*map[string][]WeightedMapping, bool) {
	if o == nil || o.Mappings == nil {
		return nil, false
	}
	return o.Mappings, true
}

// HasMappings returns a boolean if a field has been set.
func (o *Account) HasMappings() bool {
	if o != nil && o.Mappings != nil {
		return true
	}

	return false
}

// SetMappings gets a reference to the given map[string][]WeightedMapping and assigns it to the Mappings field.
func (o *Account) SetMappings(v map[string][]WeightedMapping) {
	o.Mappings = &v
}

// GetRevocations returns the Revocations field value if set, zero value otherwise.
func (o *Account) GetRevocations() map[string]int64 {
	if o == nil || o.Revocations == nil {
		var ret map[string]int64
		return ret
	}
	return *o.Revocations
}

// GetRevocationsOk returns a tuple with the Revocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetRevocationsOk() (*map[string]int64, bool) {
	if o == nil || o.Revocations == nil {
		return nil, false
	}
	return o.Revocations, true
}

// HasRevocations returns a boolean if a field has been set.
func (o *Account) HasRevocations() bool {
	if o != nil && o.Revocations != nil {
		return true
	}

	return false
}

// SetRevocations gets a reference to the given map[string]int64 and assigns it to the Revocations field.
func (o *Account) SetRevocations(v map[string]int64) {
	o.Revocations = &v
}

// GetSigningKeys returns the SigningKeys field value if set, zero value otherwise.
func (o *Account) GetSigningKeys() []string {
	if o == nil || o.SigningKeys == nil {
		var ret []string
		return ret
	}
	return o.SigningKeys
}

// GetSigningKeysOk returns a tuple with the SigningKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetSigningKeysOk() ([]string, bool) {
	if o == nil || o.SigningKeys == nil {
		return nil, false
	}
	return o.SigningKeys, true
}

// HasSigningKeys returns a boolean if a field has been set.
func (o *Account) HasSigningKeys() bool {
	if o != nil && o.SigningKeys != nil {
		return true
	}

	return false
}

// SetSigningKeys gets a reference to the given []string and assigns it to the SigningKeys field.
func (o *Account) SetSigningKeys(v []string) {
	o.SigningKeys = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Account) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetTagsOk() ([]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Account) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Account) SetTags(v []string) {
	o.Tags = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Account) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Account) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Account) SetType(v string) {
	o.Type = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Account) GetVersion() int64 {
	if o == nil || o.Version == nil {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetVersionOk() (*int64, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Account) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *Account) SetVersion(v int64) {
	o.Version = &v
}

func (o Account) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultPermissions != nil {
		toSerialize["default_permissions"] = o.DefaultPermissions
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Exports != nil {
		toSerialize["exports"] = o.Exports
	}
	if o.Imports != nil {
		toSerialize["imports"] = o.Imports
	}
	if o.InfoUrl != nil {
		toSerialize["info_url"] = o.InfoUrl
	}
	if o.Limits != nil {
		toSerialize["limits"] = o.Limits
	}
	if o.Mappings != nil {
		toSerialize["mappings"] = o.Mappings
	}
	if o.Revocations != nil {
		toSerialize["revocations"] = o.Revocations
	}
	if o.SigningKeys != nil {
		toSerialize["signing_keys"] = o.SigningKeys
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableAccount struct {
	value *Account
	isSet bool
}

func (v NullableAccount) Get() *Account {
	return v.value
}

func (v *NullableAccount) Set(val *Account) {
	v.value = val
	v.isSet = true
}

func (v NullableAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccount(val *Account) *NullableAccount {
	return &NullableAccount{value: val, isSet: true}
}

func (v NullableAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


