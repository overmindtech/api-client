/*
NATS Token Exchange

Exchanges OAuth tokens for NATS tokens

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package tokenx

import (
	"encoding/json"
)

// UserPermissionLimits struct for UserPermissionLimits
type UserPermissionLimits struct {
	// StringList is a wrapper for an array of strings
	AllowedConnectionTypes []string `json:"allowed_connection_types,omitempty"`
	BearerToken *bool `json:"bearer_token,omitempty"`
	Data *int64 `json:"data,omitempty"`
	Payload *int64 `json:"payload,omitempty"`
	Pub *Permission `json:"pub,omitempty"`
	Resp *ResponsePermission `json:"resp,omitempty"`
	// TagList is a unique array of lower case strings All tag list methods lower case the strings in the arguments
	Src []string `json:"src,omitempty"`
	Sub *Permission `json:"sub,omitempty"`
	Subs *int64 `json:"subs,omitempty"`
	Times []TimeRange `json:"times,omitempty"`
	TimesLocation *string `json:"times_location,omitempty"`
}

// NewUserPermissionLimits instantiates a new UserPermissionLimits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPermissionLimits() *UserPermissionLimits {
	this := UserPermissionLimits{}
	return &this
}

// NewUserPermissionLimitsWithDefaults instantiates a new UserPermissionLimits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPermissionLimitsWithDefaults() *UserPermissionLimits {
	this := UserPermissionLimits{}
	return &this
}

// GetAllowedConnectionTypes returns the AllowedConnectionTypes field value if set, zero value otherwise.
func (o *UserPermissionLimits) GetAllowedConnectionTypes() []string {
	if o == nil || o.AllowedConnectionTypes == nil {
		var ret []string
		return ret
	}
	return o.AllowedConnectionTypes
}

// GetAllowedConnectionTypesOk returns a tuple with the AllowedConnectionTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPermissionLimits) GetAllowedConnectionTypesOk() ([]string, bool) {
	if o == nil || o.AllowedConnectionTypes == nil {
		return nil, false
	}
	return o.AllowedConnectionTypes, true
}

// HasAllowedConnectionTypes returns a boolean if a field has been set.
func (o *UserPermissionLimits) HasAllowedConnectionTypes() bool {
	if o != nil && o.AllowedConnectionTypes != nil {
		return true
	}

	return false
}

// SetAllowedConnectionTypes gets a reference to the given []string and assigns it to the AllowedConnectionTypes field.
func (o *UserPermissionLimits) SetAllowedConnectionTypes(v []string) {
	o.AllowedConnectionTypes = v
}

// GetBearerToken returns the BearerToken field value if set, zero value otherwise.
func (o *UserPermissionLimits) GetBearerToken() bool {
	if o == nil || o.BearerToken == nil {
		var ret bool
		return ret
	}
	return *o.BearerToken
}

// GetBearerTokenOk returns a tuple with the BearerToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPermissionLimits) GetBearerTokenOk() (*bool, bool) {
	if o == nil || o.BearerToken == nil {
		return nil, false
	}
	return o.BearerToken, true
}

// HasBearerToken returns a boolean if a field has been set.
func (o *UserPermissionLimits) HasBearerToken() bool {
	if o != nil && o.BearerToken != nil {
		return true
	}

	return false
}

// SetBearerToken gets a reference to the given bool and assigns it to the BearerToken field.
func (o *UserPermissionLimits) SetBearerToken(v bool) {
	o.BearerToken = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *UserPermissionLimits) GetData() int64 {
	if o == nil || o.Data == nil {
		var ret int64
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPermissionLimits) GetDataOk() (*int64, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *UserPermissionLimits) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given int64 and assigns it to the Data field.
func (o *UserPermissionLimits) SetData(v int64) {
	o.Data = &v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *UserPermissionLimits) GetPayload() int64 {
	if o == nil || o.Payload == nil {
		var ret int64
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPermissionLimits) GetPayloadOk() (*int64, bool) {
	if o == nil || o.Payload == nil {
		return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *UserPermissionLimits) HasPayload() bool {
	if o != nil && o.Payload != nil {
		return true
	}

	return false
}

// SetPayload gets a reference to the given int64 and assigns it to the Payload field.
func (o *UserPermissionLimits) SetPayload(v int64) {
	o.Payload = &v
}

// GetPub returns the Pub field value if set, zero value otherwise.
func (o *UserPermissionLimits) GetPub() Permission {
	if o == nil || o.Pub == nil {
		var ret Permission
		return ret
	}
	return *o.Pub
}

// GetPubOk returns a tuple with the Pub field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPermissionLimits) GetPubOk() (*Permission, bool) {
	if o == nil || o.Pub == nil {
		return nil, false
	}
	return o.Pub, true
}

// HasPub returns a boolean if a field has been set.
func (o *UserPermissionLimits) HasPub() bool {
	if o != nil && o.Pub != nil {
		return true
	}

	return false
}

// SetPub gets a reference to the given Permission and assigns it to the Pub field.
func (o *UserPermissionLimits) SetPub(v Permission) {
	o.Pub = &v
}

// GetResp returns the Resp field value if set, zero value otherwise.
func (o *UserPermissionLimits) GetResp() ResponsePermission {
	if o == nil || o.Resp == nil {
		var ret ResponsePermission
		return ret
	}
	return *o.Resp
}

// GetRespOk returns a tuple with the Resp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPermissionLimits) GetRespOk() (*ResponsePermission, bool) {
	if o == nil || o.Resp == nil {
		return nil, false
	}
	return o.Resp, true
}

// HasResp returns a boolean if a field has been set.
func (o *UserPermissionLimits) HasResp() bool {
	if o != nil && o.Resp != nil {
		return true
	}

	return false
}

// SetResp gets a reference to the given ResponsePermission and assigns it to the Resp field.
func (o *UserPermissionLimits) SetResp(v ResponsePermission) {
	o.Resp = &v
}

// GetSrc returns the Src field value if set, zero value otherwise.
func (o *UserPermissionLimits) GetSrc() []string {
	if o == nil || o.Src == nil {
		var ret []string
		return ret
	}
	return o.Src
}

// GetSrcOk returns a tuple with the Src field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPermissionLimits) GetSrcOk() ([]string, bool) {
	if o == nil || o.Src == nil {
		return nil, false
	}
	return o.Src, true
}

// HasSrc returns a boolean if a field has been set.
func (o *UserPermissionLimits) HasSrc() bool {
	if o != nil && o.Src != nil {
		return true
	}

	return false
}

// SetSrc gets a reference to the given []string and assigns it to the Src field.
func (o *UserPermissionLimits) SetSrc(v []string) {
	o.Src = v
}

// GetSub returns the Sub field value if set, zero value otherwise.
func (o *UserPermissionLimits) GetSub() Permission {
	if o == nil || o.Sub == nil {
		var ret Permission
		return ret
	}
	return *o.Sub
}

// GetSubOk returns a tuple with the Sub field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPermissionLimits) GetSubOk() (*Permission, bool) {
	if o == nil || o.Sub == nil {
		return nil, false
	}
	return o.Sub, true
}

// HasSub returns a boolean if a field has been set.
func (o *UserPermissionLimits) HasSub() bool {
	if o != nil && o.Sub != nil {
		return true
	}

	return false
}

// SetSub gets a reference to the given Permission and assigns it to the Sub field.
func (o *UserPermissionLimits) SetSub(v Permission) {
	o.Sub = &v
}

// GetSubs returns the Subs field value if set, zero value otherwise.
func (o *UserPermissionLimits) GetSubs() int64 {
	if o == nil || o.Subs == nil {
		var ret int64
		return ret
	}
	return *o.Subs
}

// GetSubsOk returns a tuple with the Subs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPermissionLimits) GetSubsOk() (*int64, bool) {
	if o == nil || o.Subs == nil {
		return nil, false
	}
	return o.Subs, true
}

// HasSubs returns a boolean if a field has been set.
func (o *UserPermissionLimits) HasSubs() bool {
	if o != nil && o.Subs != nil {
		return true
	}

	return false
}

// SetSubs gets a reference to the given int64 and assigns it to the Subs field.
func (o *UserPermissionLimits) SetSubs(v int64) {
	o.Subs = &v
}

// GetTimes returns the Times field value if set, zero value otherwise.
func (o *UserPermissionLimits) GetTimes() []TimeRange {
	if o == nil || o.Times == nil {
		var ret []TimeRange
		return ret
	}
	return o.Times
}

// GetTimesOk returns a tuple with the Times field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPermissionLimits) GetTimesOk() ([]TimeRange, bool) {
	if o == nil || o.Times == nil {
		return nil, false
	}
	return o.Times, true
}

// HasTimes returns a boolean if a field has been set.
func (o *UserPermissionLimits) HasTimes() bool {
	if o != nil && o.Times != nil {
		return true
	}

	return false
}

// SetTimes gets a reference to the given []TimeRange and assigns it to the Times field.
func (o *UserPermissionLimits) SetTimes(v []TimeRange) {
	o.Times = v
}

// GetTimesLocation returns the TimesLocation field value if set, zero value otherwise.
func (o *UserPermissionLimits) GetTimesLocation() string {
	if o == nil || o.TimesLocation == nil {
		var ret string
		return ret
	}
	return *o.TimesLocation
}

// GetTimesLocationOk returns a tuple with the TimesLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPermissionLimits) GetTimesLocationOk() (*string, bool) {
	if o == nil || o.TimesLocation == nil {
		return nil, false
	}
	return o.TimesLocation, true
}

// HasTimesLocation returns a boolean if a field has been set.
func (o *UserPermissionLimits) HasTimesLocation() bool {
	if o != nil && o.TimesLocation != nil {
		return true
	}

	return false
}

// SetTimesLocation gets a reference to the given string and assigns it to the TimesLocation field.
func (o *UserPermissionLimits) SetTimesLocation(v string) {
	o.TimesLocation = &v
}

func (o UserPermissionLimits) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowedConnectionTypes != nil {
		toSerialize["allowed_connection_types"] = o.AllowedConnectionTypes
	}
	if o.BearerToken != nil {
		toSerialize["bearer_token"] = o.BearerToken
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Payload != nil {
		toSerialize["payload"] = o.Payload
	}
	if o.Pub != nil {
		toSerialize["pub"] = o.Pub
	}
	if o.Resp != nil {
		toSerialize["resp"] = o.Resp
	}
	if o.Src != nil {
		toSerialize["src"] = o.Src
	}
	if o.Sub != nil {
		toSerialize["sub"] = o.Sub
	}
	if o.Subs != nil {
		toSerialize["subs"] = o.Subs
	}
	if o.Times != nil {
		toSerialize["times"] = o.Times
	}
	if o.TimesLocation != nil {
		toSerialize["times_location"] = o.TimesLocation
	}
	return json.Marshal(toSerialize)
}

type NullableUserPermissionLimits struct {
	value *UserPermissionLimits
	isSet bool
}

func (v NullableUserPermissionLimits) Get() *UserPermissionLimits {
	return v.value
}

func (v *NullableUserPermissionLimits) Set(val *UserPermissionLimits) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPermissionLimits) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPermissionLimits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPermissionLimits(val *UserPermissionLimits) *NullableUserPermissionLimits {
	return &NullableUserPermissionLimits{value: val, isSet: true}
}

func (v NullableUserPermissionLimits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPermissionLimits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


